// Let's graph the sine / cosine functions in Speak!
mod 
    "fmt" 
    "math"

// repeat a string n times
repeat: s string, n int -> string
    if n == 0 ? = s ! = s + (repeat s n - 1)

// loop a function f, n times
loop: f .(_ int -> float64), n int -> ()
    if n > 0 ?  (f ()) = loop f n - 1 ! = ()

// graph a single point
draw: x int, fn .(int -> float64), symbol string -> ()
    n is (fn x / 2) + 1
    fmt::log (repeat " " (math::floor 20 * n)) + symbol

// recursively draw from a single value
drawRec: max int -> ()
    if max == 0 ? = 0
        !   draw max math::sin "+"
		    draw max .(x int -> float64 = (math::cos x) + 0.7) "o"
            = drawRec max - 1
